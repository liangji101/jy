package com.renren.ntc.video.biz.dao;

import java.util.List;

import net.paoding.rose.jade.annotation.DAO;
import net.paoding.rose.jade.annotation.SQL;

import com.renren.ntc.video.entity.Sharement;
import com.renren.ntc.video.formbean.UidVideoCount;
import com.renren.ntc.video.utils.Constants;

/**
 * 
 * @author dapeng.zhou email:dapeng.zhou@renren-inc.com
 *与分享相关的dao
 */

@DAO(catalog = Constants.DB_SHARE)
public interface ShareDAO {
	
	
	 final static String FIELDS = "uid,share_id,content,url_md5,share_type," +
	 		"comment_count,comment_index,create_time,url,source_id,feed_id,vid,chk,del, privacy";
	 final static String ALL_FIELDS = "id,uid,share_id,content,url_md5,share_type," +
		"comment_count,comment_index,create_time,url,source_id,feed_id,vid,chk,del, privacy";

	
	@SQL("insert into share("
			+ FIELDS
			+ ") "
			+ "values(:1.uid,:1.shareId,:1.content,:1.urlMd5," +
					":1.shareType,:1.commentCount,:1.commentIndex," +
					":1.createTime,:1.url,:1.sourceId,:1.feedId,:1.vid,:1.chk,:1.del, :1.privacy)")
	public int addShare(Sharement share);

	@SQL("update share set del = 1 where share_id=:1")
	public int delShareByShareId(long id);
	
	@SQL("update share set uid=:1.uid where vid=:1.vid")
	public int updateShareUid(Sharement share);

	@SQL("select " + ALL_FIELDS + " from share where uid=:1  and del=0 and chk='y' and create_time<'2012-10-21'")
	public List<Sharement> getShareByUid(int uid);
	
	@SQL("select " + ALL_FIELDS + " from share where uid=:1 and del=0 limit :2,:3")
	public List<Sharement> getShareByUid(int uid, int offset, int count);
	
	@SQL("select " + ALL_FIELDS + " from share where uid=:1 and chk = 'y' and del=0  order by create_time desc limit :2,:3 ")
	public List<Sharement> getShareById(int uid, int offset, int count);
	
	@SQL("select " + ALL_FIELDS + " from share where uid=:1 and del=0")
	public List<Sharement> getShareCountByUid(int uid);


	@SQL("select " + ALL_FIELDS + " from share where share_id=:1 and chk='y' and del=0")
	public Sharement getShareByShareId(long shareId);

	@SQL("select " + ALL_FIELDS + " from share where share_id=:1 and del=0")
	public Sharement getShareByShareIdIgnoreStatus(long shareId);
	
	@SQL("select " + FIELDS + " from share where share_id in(:1) and chk='y' and del=0 order by create_time desc ")
	public List<Sharement> getShareByShareId(List<Long> shareId);

	//@SQL("select " + FIELDS + " from share s, " + VideoPrivacyDAO.TABLE_NAME + " vp where s.share_id = vp.sid and vp.privacy != " + Constants.PRIVACY_VIDEO_PRIVATE + " and uid=:1 and chk='y' limit :2, :3")
	//public List<Sharement> getShareByUid(int uid, int offset, int count);

    @SQL("select " + FIELDS + " from share where uid=:1 and chk='y' and del=0 and vid !=0 order by create_time desc limit :2, :3 ")
    public List<Sharement> getAllShareByUid(int uid, int offset, int count);

    @SQL("select " + FIELDS + " from share where uid=:1 and chk='y' and del=0 and privacy = 0 and vid !=0 order by create_time desc limit :2, :3 ")
    public List<Sharement> getAllPublicShareByUid(int uid, int offset, int count);

    @SQL("select " + FIELDS + " from share where uid=:1 and chk='y' and del=0 and privacy != 2 and vid !=0 order by create_time desc limit :2, :3 ")
    public List<Sharement> getAllNonPrivateShareByUid(int uid, int offset, int count);

	@SQL("update share set comment_count=comment_count+1 where share_id=:1")
	public void commCountInc(long share_Id);
	
	@SQL("update share set comment_count=comment_count-1 where share_id=:1 and comment_count > 0")
	public void commCountDec(long share_Id);

	@SQL("select  count(share_id)  from share where uid=:1 and del=0")
	public int getShareCountByIdIgnoreStatus(long uid);

	@SQL("select  count(share_id)  from share where uid=:1 and chk = 'y' and del=0 and vid != 0")
	public int getShareCountById(long uid);

    @SQL("select count(share_id) from share where uid = :1 and chk = 'y' and del = 0 and privacy != 2 and vid != 0")
    public int getNonPrivateShareCount(long uid);

    @SQL("select count(share_id) from share where uid = :1 and chk = 'y' and del = 0 and privacy = 0 and vid != 0")
    public int getPublicShareCount(long uid);

	@SQL("select  count(uid)  from share where uid=:1 and del=0 and (source_id =:2 or share_id = :2)")
	public int isShared(int uid, long en_id);

	@SQL("update share set feed_id=:2 where share_id=:1")
	public int updateFid(long shareId, long feed_id);

	@SQL("select content from share group where del=0 by source_id order by count(source_id) desc limit :1,:2")
	public  List<String>  queryHots(int offset, int count);

	@SQL("select " + ALL_FIELDS + " from share where vid=:1 and del=0")
	public Sharement getShareByVid(long vid);
	
	@SQL("update share set chk = :2 where vid = :1")
	public int updateChk(long vid, String chk);
	
	@SQL("select " + ALL_FIELDS +" from share where share_id in (:1)")
	public List<Sharement> getSharesByShareIds(List<Long> shareIds);
	
	//每次取最新的100条，因为可能有视频是私有视频，需要过滤掉
	@SQL("select "+ ALL_FIELDS +" from share where del=0 and chk='y' and privacy = 0 order by create_time desc limit :1, :2")
	public List<Sharement> getPublicNewestShares(int offset, int count);
	
	@SQL("update share set content=:1.content, vid =:1.vid, chk = :1.chk, privacy = :1.privacy where share_id=:1.shareId")
	public int updateShare(Sharement share);

	@SQL("select uid from share where share_id=:1 and del=0")
	public int getByShareId(long source_id);

	@SQL("select uid from share where share_id=:1 and del=1")
	public Sharement getShareByShareIdwithDel(long sid);
	
	@SQL("select " + ALL_FIELDS + " from share where share_id!=:4 and del=0 and uid=:1 and chk='y' and privacy = 0 order by create_time desc limit :2,:3")
	public List<Sharement> getPublicNewestShares(int uid, int offset, int count, long shareId);
	
	@SQL("update share set content=:2 where share_id=:1")
	public int updateShareContent(int shareId, String content);
	
	
	@SQL("select count(share_id) from share where chk='y' and del=0")
	public long countAll();
	
	//此方法仅限后台编辑时调用
	@SQL("select " + ALL_FIELDS + " from share where del=0 and chk='y' and content LIKE "+":1")
	public List<Sharement> getShareByShareContent(String content);
	
	@SQL("select " + ALL_FIELDS + " from share where share_id=:1 and chk='y' and del=0")
	public Sharement getPublicShareByShareId(long shareId);
	
	@SQL("select " + ALL_FIELDS + " from share where del=0 and chk='y' and share_id not in (select share_id from ntc_token.rec_share where weight!=-1) and share_id not in (select share_id from ntc_token.pending_recshare where result=0) order by create_time desc limit :1,:2")
	public List<Sharement> getNonHotShares(int offset, int count);
	
	//后台查询数据时使用
	@SQL("select count(id) from share where share_id not in (select share_id from ntc_token.rec_share where weight!=-1) and del=0 and chk='y'")
	public int countNonHotVideos();

	@SQL("select count(distinct(uid)) from share where create_time between :1 and :2")
	public int getUserCount(String beginTime, String endTime);
	
	@SQL("select count(id) from share where vid!=0 and create_time between :1 and :2")
	public int getSucUploadCount(String beginTime, String endTime);
	
	@SQL("select count(id) from share where create_time between :1 and :2")
	public int getAllUploadCount(String beginTime, String endTime);
	
	@SQL("select count(id) from share where vid!=0 and uid in (select sc_uid from ntc_token.third_user where rr_uid!=0) and create_time between :1 and :2")
	public int getSucUploadWithRRCount(String beginTime, String endTime);
	
	@SQL("select count(id) from share where vid!=0 and uid in (select sc_uid from ntc_token.third_user where sina_uid!=0) and create_time between :1 and :2")
	public int getSucUploadWithSinaCount(String beginTime, String endTime);
	
	@SQL("select count(id) from share where vid!=0 and uid in (select sc_uid from ntc_token.third_user where sina_uid!=0 and rr_uid!=0) and create_time between :1 and :2")
	public int getSucUploadWithRRAndSinaCount(String beginTime, String endTime);
	
	@SQL("select count(id) from share where vid!=0 and uid not in (select sc_uid from ntc_token.third_user) and create_time between :1 and :2")
	public int getSucUploadWithoutRROrSinaCount(String beginTime, String endTime);
	
	@SQL("select count(id) from share where vid!=0 and privacy=2 and create_time between :1 and :2")
	public int getSucUploadWithPrivateCount(String beginTime, String endTime);
	
	@SQL("select sum(comment_count) from share where create_time between :1 and :2")
	public int getAllCommentCount(String beiginTime,String endTime);
	
	@SQL("select count(share_id) from share where chk='y' and create_time between :1 and :2")
	public int getAllCheckedCount(String beiginTime,String endTime);
	
    @SQL("select count(id) from share where vid=:1 and chk=:2")
    public int query(long vid, String chk);
    
    @SQL("select " + ALL_FIELDS + " from share where chk='y' and del=0 limit :1,:2")
    public List<Sharement> getShares(long offset,long count);
    
    @SQL("select privacy from share where share_id = :1")
    public int getPrivacy(long shareId);
    
    @SQL("update share set privacy=:2 where share_id=:1")
    public int updatePrivacy(long shareId,int privacy);
    
    @SQL("select share_id,privacy from share where share_id not in (select sid from ntc_token.video_privacy)")
    public List<Sharement> getOtherShares();

    @SQL("select "+ALL_FIELDS+" from  share where vid !=0 and chk = 'n' and hour( timediff(create_time,now())) < 48")
	public List<Sharement> getNoCheckSuccessVideos();

    @SQL("select uid,count(share_id) as videoCount from share  where uid in (:1) and chk = 'y' and del = 0 and privacy != 2 group by uid order by count(share_id) desc limit 100;")
	public List<UidVideoCount> getShareCountByIds(List<Integer> uids);
    
    @SQL("update share set uid=:2 where share_id=:1")
    public int updateVideoOwner(long shareId,int uid);

    @SQL("update share set chk='n' where vid=0 and chk='y'")
	public void rchk();
}
