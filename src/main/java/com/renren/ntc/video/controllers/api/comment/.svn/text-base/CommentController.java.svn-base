package com.renren.ntc.video.controllers.api.comment;

import com.renren.ntc.video.annotations.AccessTokenChecker;
import com.renren.ntc.video.annotations.ValidationRule;
import com.renren.ntc.video.annotations.VideoPrivacyCheck;
import com.renren.ntc.video.biz.logic.UserService;
import com.renren.ntc.video.biz.model.CommentIndex;
import com.renren.ntc.video.biz.model.User;
import com.renren.ntc.video.entity.Sharement;
import com.renren.ntc.video.interceptors.access.NtcHostHolder;
import com.renren.ntc.video.service.*;
import com.renren.ntc.video.service.msg.MsgService;
import com.renren.ntc.video.service.reply.ReplyService;
import com.renren.ntc.video.utils.*;
import com.xiaonei.antispam.validator.HtmlPure;
import net.paoding.rose.web.annotation.Param;
import net.paoding.rose.web.annotation.Path;
import net.paoding.rose.web.annotation.rest.Get;
import net.paoding.rose.web.annotation.rest.Post;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;

@AccessTokenChecker
@Path("")
public class CommentController {

    @Autowired
    private CommentService commservice;
    
    @Autowired
    private UserService userService;

    @Autowired
    private NtcHostHolder hostHolder;
    
    @Autowired
    private EventService eventService;

    @Autowired

    private ShareService shareService;

    @Autowired
    private FeedService feedService;

    @Autowired
    private ReplyService replyService;

    @Autowired
    private MsgService msgService;

    @Autowired
    SequenceService sequenceIdDAO;

    @Autowired
    SnsSycService snsSycService;

    private static Log logger = LogFactory.getLog(CommentController.class);

    @VideoPrivacyCheck
    @Get("/add")
    @Post("/add")
    @ValidationRule("[{'name':'content', 'antispam':'true'}]")
    public String addComment(
            @Param("comment_index") String comment_index,
			@Param("content") @HtmlPure String content,
            @Param("reply_to_uid") int desUid , @Param("app_verStr") long v) {
		CommentIndex ci = null;
		if(logger.isInfoEnabled()){
			logger.info(String.format("comment_index %s , content %s ,desUid %d ", comment_index,content,desUid));
		}
		try {
			  ci  = BaseUtil.paser(comment_index);
		} catch (Exception e) {
			return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
		}
		
	    User user =	hostHolder.getUser();
	    long comment_id = sequenceIdDAO.getCommentId();
        if (Constants.SHARE.equals(ci.pre)) {
            Sharement share = shareService.getShareByShareIdIgnoreStatus(ci.getId());
            if (share == null) {
                return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
            }
            boolean bool = commservice.addComment(comment_index, comment_id, user.getId(), content, desUid);
            if (!bool) {
                return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.OP_ERROR);
            }
            long feedId = share.getFeedId();
            if(desUid!=0){
    			content = BaseUtil.paserContent(content);
    		}
            if (feedId != 0) {
                String con = EmojiEncoder.getInstance().convert(content);
                int re = feedService.appendComment(feedId, share.getCommentCount(), comment_id, user.getId(), con, new Date());
                if (re <= 0) {
                    return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SERVER_UNKNOW_EXCEPTION);
                }
                feedService.commCountInc(feedId);
                shareService.commCountInc(ci.getId());
                if (desUid == 0) {
                	if(share.getPrivacy()==0){//只有公开视频才发好友消息
                		 msgService.sendMsg(user, share.getUid(), PushAction.COMMENT.ordinal(), share, comment_id, content, con, v);
                		 String videoHolderName = userService.query(share.getUid()).getName();
                		 String msg = eventService.addMsg(user.getId(), share.getUid(), share.getShareId(), EventUtil.COMMENT.getAction(), 
                				 user.getName(), videoHolderName, content,share.getVideo().getTitle());
                		 RedisUtil.getInstance().zAdd(Constants.EVENT, System.currentTimeMillis(),msg);
                	}else{//只发给视频所有者
                		msgService.sendMsgWithOutFriendsMsg(user.getId(), share.getUid(), PushAction.COMMENT.ordinal(), content, share);
                	}
                } else {
                    msgService.sendMsgWithOutFriendsMsg(user.getId(), desUid, PushAction.REPLY_COMMENT.ordinal(), content, share);
                    replyService.replyToWeb(user.getId(), desUid, share, comment_id);
                    if (user.getId() != share.getUid() && desUid != share.getUid()) {
                        msgService.sendMsgWithOutFriendsMsg(user.getId(), share.getUid(), PushAction.COMMENT.ordinal(), content, share);
                        replyService.replyToWeb(user.getId(), share.getUid(), share, comment_id);
                    }
                }
            }
        }
        //todo 把评论内容加到 feed 缓存中
        return "@" + JsonResponse.formSuccessResponse();
    }

    @Get("/del")
    @Post("/del")
    //未开发完成
    public String delComment(@Param("comment_index") String comment_index,
                             @Param("comment_id") int comment_id) {

        CommentIndex ci = null;
        try {
            ci = BaseUtil.paser(comment_index);
        } catch (Exception e) {
            return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.PARMATERS_INVALID);
        }
        boolean bool = commservice.delComment(comment_index, comment_id);
        if (!bool) {
            return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.OP_ERROR);

        }

        if (Constants.SHARE.equals(ci.pre)) {
            shareService.commCountDec(ci.getId());
        }
        //todo 把评论内容更新到 feed 缓存中

        return "@" + JsonResponse.formSuccessResponse();
    }

    @Get("/update")
    @Post("/update")
    public String updateComment(@Param("comment_index") String comment_index,
                                @Param("comment_id") int comment_id,
                                @Param("content") @HtmlPure String content) {

        User user = hostHolder.getUser();
        int uid = user.getId();
        boolean bool = commservice.updateComment(comment_index, comment_id, uid, content);
        if (bool) {
            return "@" + JsonResponse.formSuccessResponse();
        }
        return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.OP_ERROR);
    }

    @Get("/gets")
    @Post("/gets")
    public String getCommentsByPage(@Param("comment_index") String comment_index,
                                    @Param("offset") int offset,
                                    @Param("count") int count) {
        JSONArray list = commservice.getComments(comment_index, offset, count);
        return "@" + JsonResponse.formComplexResponse(list);
    }

    @Get("/get")
    @Post("/get")
    public String getComment(@Param("comment_index") String comment_index,
                             @Param("comment_id") int comment_id) {
        JSONObject obj = commservice.getComment(comment_index, comment_id);
        return "@" + JsonResponse.formComplexResponse(obj);
    }


}
