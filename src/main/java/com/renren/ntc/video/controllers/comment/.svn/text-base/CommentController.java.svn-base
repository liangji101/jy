package com.renren.ntc.video.controllers.comment;

import java.util.Date;

import net.paoding.rose.web.annotation.Param;
import net.paoding.rose.web.annotation.Path;
import net.paoding.rose.web.annotation.rest.Get;
import net.paoding.rose.web.annotation.rest.Post;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;

import com.mongodb.BasicDBObject;
import com.renren.ntc.video.annotations.LoginRequired;
import com.renren.ntc.video.annotations.VideoPrivacyCheck;
import com.renren.ntc.video.biz.logic.UserService;
import com.renren.ntc.video.biz.model.CommentIndex;
import com.renren.ntc.video.biz.model.User;
import com.renren.ntc.video.entity.Sharement;
import com.renren.ntc.video.interceptors.access.NtcHostHolder;
import com.renren.ntc.video.service.CommentService;
import com.renren.ntc.video.service.EventService;
import com.renren.ntc.video.service.FeedService;
import com.renren.ntc.video.service.SequenceService;
import com.renren.ntc.video.service.ShareService;
import com.renren.ntc.video.service.SnsSycService;
import com.renren.ntc.video.service.msg.MsgPushServiceImpl;
import com.renren.ntc.video.service.msg.MsgService;
import com.renren.ntc.video.service.reply.ReplyService;
import com.renren.ntc.video.utils.BaseUtil;
import com.renren.ntc.video.utils.Constants;
import com.renren.ntc.video.utils.EmojiEncoder;
import com.renren.ntc.video.utils.EventUtil;
import com.renren.ntc.video.utils.JsonResponse;
import com.renren.ntc.video.utils.MemcachedUtil;
import com.renren.ntc.video.utils.PushAction;
import com.renren.ntc.video.utils.RedisUtil;
import com.xiaonei.antispam.validator.HtmlPure;

/**
 * Author: Weiliang Shuai
 * Contact: weiliang.shuai@renren-inc.com
 * Date: 12-7-21
 * Time: 下午4:18
 */

@Path("")
public class CommentController {

    @Autowired
    private CommentService commservice;

    @Autowired
    private NtcHostHolder hostHolder;

    @Autowired
    private ShareService shareService;
    
    @Autowired
    private UserService userService;

    @Autowired
    private EventService eventService;
    
    @Autowired
    private FeedService feedService;

    @Autowired
    private MsgService msgService;

    @Autowired
    SequenceService sequenceIdDAO;

    @Autowired
    SnsSycService snsSycService;
    
    @Autowired
    MsgPushServiceImpl commentPush;
    
    @Autowired
    ReplyService replyService;

    @LoginRequired
    @VideoPrivacyCheck
    @Post("/add")
    @Get("/add")
    public String addComment(
            @Param("comment_index") String commentIndex,
            @Param("content") @HtmlPure String content,
            @Param("desUid") int desUid) {
    	CommentIndex ci = null;
		try {
			  ci  = BaseUtil.paser(commentIndex);
		} catch (Exception e) {
			return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
		}
	    User user =	hostHolder.getUser();
	    long comment_id = sequenceIdDAO.getCommentId();
        if(Constants.SHARE.equals(ci.pre)){
            Sharement share = shareService.getShareByShareIdIgnoreStatus(ci.getId());
            if(share == null){
            	return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
            	
            }
            //保存评论到数据库
        	boolean bool = commservice.addComment(commentIndex, comment_id, user.getId(), content,desUid);
    		if (!bool) {
    			return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.OP_ERROR);
            }
    		long feedId = share.getFeedId();
    		//过滤掉前面的"回复:***"
    		if(desUid!=0){
    			content = BaseUtil.paserContent(content);
    		}
            if( feedId != 0){
            	String con = EmojiEncoder.getInstance().convert(content);
                int re = feedService.appendComment(feedId,share.getCommentCount(), comment_id, user.getId(), con,new Date());
                if (re <= 0){
                	return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SERVER_UNKNOW_EXCEPTION);
                }
                feedService.commCountInc(feedId);
                shareService.commCountInc(ci.getId());
                if(desUid==0){//评论
                	if(share.getPrivacy()==0){//只有公开视频才发好友消息
                		msgService.sendMsgWebComment(user, share.getUid(), PushAction.COMMENT.ordinal(), share, comment_id, content,con);
                		 String videoHolderName = userService.query(share.getUid()).getName();
                		 String msg = eventService.addMsg(user.getId(), share.getUid(), share.getShareId(), EventUtil.COMMENT.getAction(), 
                				 user.getName(), videoHolderName, content,share.getVideo().getTitle());
                		 RedisUtil.getInstance().zAdd(Constants.EVENT, System.currentTimeMillis(),msg);
                	}else{//只发给视频所有者
                		msgService.sendMsgWithOutFriendsMsg(user.getId(), share.getUid(), PushAction.COMMENT.ordinal(), content, share);
                	} 
                }else{//给回复的那条评论的所有者发消息
                	msgService.sendMsgWithOutFriendsMsg(user.getId(), desUid, PushAction.REPLY_COMMENT.ordinal(), content, share);
                    replyService.replyToWeb(user.getId(), desUid, share, comment_id);
                    if (user.getId() != share.getUid() && desUid != share.getUid()) {
                        msgService.sendMsgWithOutFriendsMsg(user.getId(), share.getUid(), PushAction.COMMENT.ordinal(), content, share);
                        replyService.replyToWeb(user.getId(), share.getUid(), share, comment_id);
                    }
                }
            }
        }
        MemcachedUtil.getInstance().cacheHashCode(user.getId(), content.hashCode());
        //前端加锚点需要返回一个commentId,因为需要从人人的提醒到终端页时能定位到对应的评论
        JSONObject obj = new JSONObject();
        obj.put("op", "done");
        obj.put("commentId", comment_id);
        return "@" + obj.toString();
    }

    @Get("/more")
    public String getCommentsByPage(
            @Param("comment_index") String commentIndex,
            @Param("offset") int offset,
            @Param("count") int count) {
        JSONArray list = commservice.getWebComments(commentIndex, offset, count);
        //不能走这个,因为涉及到html标签的解码
//        JSONArray list = commservice.getComments(commentIndex, offset, count);
        return "@" + JsonResponse.formComplexResponse(list);
    }
    
    //删除评论
    @Post("del")
    public String del(@Param("comment_index") String commentIndex, @Param("comment_id") long cid) {
        CommentIndex ci = null;
        try {
            ci = BaseUtil.paser(commentIndex);
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        if(ci == null) {
            return "@fail";
        }
        try{
        	BasicDBObject obj = commservice.getActualComment(commentIndex, cid);
        	int uid = obj.getInt("uid");
        	User user = hostHolder.getUser();
        	//保证删除操作的是评论的所有者
        	if (uid != user.getId()){
        		return "@fail";
        	}
        	if(commservice.delComment(commentIndex, cid)) {
                shareService.commCountDec(ci.getId());
                Sharement share = shareService.getShareByShareId(ci.getId());
                feedService.commCountDec(share.getFeedId());
                return "@success";
            } else {
                return "@fail";
            }
        }catch(Exception e){
        	e.printStackTrace();
        	return "@fail";
        }
    }
}
