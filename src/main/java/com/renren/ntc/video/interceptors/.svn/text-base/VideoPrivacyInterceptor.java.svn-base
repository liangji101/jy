package com.renren.ntc.video.interceptors;

import java.lang.annotation.Annotation;
import java.util.List;

import net.paoding.rose.web.ControllerInterceptorAdapter;
import net.paoding.rose.web.Invocation;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.renren.ntc.video.annotations.VideoPrivacyCheck;
import com.renren.ntc.video.biz.model.CommentIndex;
import com.renren.ntc.video.biz.model.User;
import com.renren.ntc.video.entity.Sharement;
import com.renren.ntc.video.interceptors.access.NtcHostHolder;
import com.renren.ntc.video.service.RelationShipService;
import com.renren.ntc.video.service.ShareService;
import com.renren.ntc.video.service.VideoPrivacyService;
import com.renren.ntc.video.utils.BaseUtil;
import com.renren.ntc.video.utils.Constants;
import com.renren.ntc.video.utils.JsonResponse;

public class VideoPrivacyInterceptor extends ControllerInterceptorAdapter {

    @Autowired
    private NtcHostHolder hostHolder;
    
    @Autowired
    private ShareService shareService;
    
    @Autowired
    private VideoPrivacyService videoPrivacyService;
    
    @Autowired
    private RelationShipService relationShipService;
    
    private static final Logger logger = LoggerFactory.getLogger(VideoPrivacyInterceptor.class);

    @Override
    protected Class<? extends Annotation> getRequiredAnnotationClass() {
        return VideoPrivacyCheck.class;
    }

    @Override
    protected Object before(Invocation inv) throws Exception {
    	String path = inv.getRequest().getRequestURI() ;
    	User user = hostHolder.getUser();
    	if (path.startsWith("/api/share/sycShare")){
    		long shareId = Long.parseLong(inv.getParameter("en_id"));
    		Sharement sharement = shareService.getShareByShareIdIgnoreStatus(shareId);
    		if (sharement == null){
    			return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
    		}
    		if (sharement.getPrivacy() == 1){
    			return "@"+JsonResponse.formFailResponse(Constants.ErrorCode.VIDEO_FANS_ONLY);
    		}
    		if (sharement.getPrivacy() == 2){
    			return "@"+JsonResponse.formFailResponse(Constants.ErrorCode.VIDEO_PRIVATE);
    		}
    		return true;
    	}
    	if(path.startsWith("/api/like")||path.startsWith("/like")){
    		long shareId = 0;
            if(path.startsWith("/api/like")){
            	  shareId = Long.parseLong(inv.getRequest().getParameter("en_id"));
            	  Sharement share = shareService.getShareByShareIdIgnoreStatus(shareId);
                  if(share == null){
                  	return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
                  }
            	if( videoPrivacyService.isOperatePermitted(user.getId(), shareId)){
            		return true;
            	}
            		return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.LIKE_ERROR);
            } 
            if(path.startsWith("/like")){
            	 shareId = Long.parseLong(inv.getRequest().getParameter("shareId"));
            	 Sharement share = shareService.getShareByShareIdIgnoreStatus(shareId);
                 if(share == null){
                 	return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
                 }
            	 if( videoPrivacyService.isOperatePermitted(user.getId(), shareId)){
             		return true;
             	}
             		return "@0";
            }
    	}
    	if(path.startsWith("/api/comment/add")||path.startsWith("/comment/add")){
    		String commIndex = inv.getRequest().getParameter("comment_index");
    		CommentIndex ci = null;
    		try {
  			  ci  = BaseUtil.paser(commIndex);
    		} catch (Exception e) {
    			return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
    		}
            Sharement share = shareService.getShareByShareIdIgnoreStatus(ci.getId());
            if(share == null){
            	return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
            }
            if(videoPrivacyService.isOperatePermitted(user.getId(), ci.getId())){
            	return true;
            }
            return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.COMMENT_NO_POWER);
    	}
    	if(path.startsWith("/api/mark/add")){
    		String uids = inv.getRequest().getParameter("uids");
    		long shareId=Long.parseLong(inv.getRequest().getParameter("en_id"));
            Sharement share = shareService.getShareByShareIdIgnoreStatus(shareId);
            if(share == null){
            	return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.SHAREMISS);
            }
    		int uid=0;
    		if(share.getPrivacy()==2){
    			return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.MARK_NO_POWER);
    		}
            List<Integer> huFengUids = relationShipService.getHuFengUids(share.getUid());
    		for (String strUid : uids.split(Constants.UID_SPILITTER)) {
				try {
					uid = Integer.valueOf(strUid);
					 if(uid == share.getUid()){
			            return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.MARK_NO_POWER);
			            }
					 if(!huFengUids.contains(uid)){
						return "@" + JsonResponse.formFailResponse(Constants.ErrorCode.MARK_HUFENG);
					}
				} catch (NumberFormatException e) {
					logger.warn("用户id解析异常: " + strUid);
				}
    		return true;
    	}
	}
		return true;
    }    
}
