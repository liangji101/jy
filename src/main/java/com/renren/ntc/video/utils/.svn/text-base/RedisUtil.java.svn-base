package com.renren.ntc.video.utils;

import com.renren.ad.jedis.Tuple;
import com.renren.cluster.ClusterException.ClusterConnException;
import com.renren.cluster.client.redis.RedisClusterPoolClient;
import com.renren.ntc.video.formbean.FeedWithScore;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class RedisUtil {


	static Log logger = LogFactory.getLog(RedisUtil.class);

	private static RedisUtil instance = new RedisUtil();

    //	private static Jedis jedis ;
	
	private RedisClusterPoolClient jedis;
	private static final int START = 0;
	private static final int END = 199;
	
	
	
	public RedisUtil() {
//		 jedis = new Jedis(Constants.HOST,6379,1000);
		 try {
			jedis = new RedisClusterPoolClient("socialcam","webzk1.d.xiaonei.com:2181,webzk2.d.xiaonei.com:2181,webzk3.d.xiaonei.com:2181,webzk4.d.xiaonei.com:2181,webzk5.d.xiaonei.com:2181");
		} catch (ClusterConnException e) {
			logger.warn("Redis initialization fails", e);
		}

	}

	public Long append(String key , String value){
		return jedis.append(key, value);
	}
	/**
	 * 往list 底部追加。
	 * 
	 * @param key
	 * @param value
	 * @return
	 */
	public Long rpush(String key, String value) {
		return jedis.rpush(key, value);
	}

	/**
	 * 往list 头部追加。
	 * 
	 * @param key
	 * @param value
	 * @return
	 */
	public Long lpush(String key, String value) {
		if( END+1 <= jedis.llen(key) ){
			jedis.ltrim(key,START, END-1);
			//截断
		}
		return jedis.lpush(key, value);	
	}
	
	/**
	 * 往scored set 加入feed。
	 * 
	 * @param key
	 * @param score
	 * @param value
	 * @return
	 */
	public long zAdd(String key, double score, long id) {
		String feedId = String.valueOf(id);
		if(zcount(key,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY) > END){
			trimp(key);
		}
		return jedis.zadd(key.getBytes(), score, feedId.getBytes());	
	}
	
	public long zAdd(String key, double score, String value) {
		if(zcount(key,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY) > END){
			trimp(key);
		}
		return jedis.zadd(key.getBytes(), score, value.getBytes());	
	}
	
	
	/**
	 * 获取scored set 的feed id 从低到高
	 * 
	 * @param key
	 * @return
	 */
	public Set<String> zRange(String key,int offset,int count) {
		return jedis.zrange(key, offset, count);
	}
	
	/**
	 * 获取scored set 的feed id 从高到低
	 * 
	 * @param key
	 * @return
	 */
	public Set<byte[]> zRevRange(String key,int offset,int count) {
		int end = offset + count;
		if (offset < START) {
			offset = START;
		}
		if ((offset + count) > END) {
			end = END;
		}
		return jedis.zrevrange(key.getBytes(), offset, end-1);
	}
	/**
	 * 获取scored set 的feed id 从高到低 带score
	 * 
	 * @param key
	 * @return
	 */
	public Set<Tuple> zRevRangeWithScore(String key,int offset,int count) {
		int end = offset + count;
		if (offset < START) {
			offset = START;
		}
		if ((offset + count) > END) {
			end = END;
		}
		return jedis.zrevrangeWithScores(key.getBytes(), offset, end);
	}
	
	/**
	 * 查看scored set里面是否存在这样的key-value
	 * 
	 * @param key 
	 * @param id
	 * @return
	 */
	public Long zRank(String key ,long id) {
		String feedId = String.valueOf(id);
		return jedis.zrank(key.getBytes(), feedId.getBytes());
	}
	
	/**
	 * 根据key-value 获取score
	 * 
	 * @param key 
	 * @param id
	 * @return
	 */
	public Double zScore(String key ,long id) {
		Double score = 0.0d;
		try{
		String feedId = String.valueOf(id);
		score=jedis.zscore(key.getBytes(), feedId.getBytes());
		}catch(Exception e){
			//
		}
		return score;
	}
	
	public   List<String> getZRangeList(String key,int offset,int count){
		Set<byte[]> ls  =  zRevRange(key,offset,count);
		 ArrayList al  =  new ArrayList();
		 for( byte[] b : ls){
			 al.add(new String(b));
		 }
		 return al;
	}
	
	public   Set<Tuple> getZRangeListByScore(String key,double scoreLow,double scoreHigh){
		 Set<Tuple> ls  = jedis.zrangeByScoreWithScores(key, scoreLow, scoreHigh, 0, 20);
		 return ls;
	}
	
	/**
	 * 截断排在第200的feed之后的所有feed
	 * 
	 * @param key 
	 * @param id
	 * @return
	 */
	public boolean trimp(String key){
		long total=zcount(key,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);
		jedis.zremrangeByRank(key.getBytes(), 0, (int) (total -200));
		return false;
	}
	
	public boolean remove(String key ,String members){
		jedis.zrem(key, members);
		return false;
	}
	
	public   List<FeedWithScore> getZRangeListWithSocre(String key,int offset,int count){
		Set<Tuple> ls  =  zRevRangeWithScore(key,offset,count);
		 List<FeedWithScore> al  =  new ArrayList();
		 for( Tuple b : ls){
			FeedWithScore feedWithScore = new FeedWithScore();
			long feedId = Long.parseLong(b.getElement());
			feedWithScore.setFeedId(feedId);	
			feedWithScore.setScore(new Double(b.getScore()).longValue());
			 al.add(feedWithScore);
		 }
		 return al;
	}
	
	public   List<String> getList(String key,int offset,int count){
		 List<byte[]> ls  =  get(key,offset,count);
		 ArrayList al  =  new ArrayList();
		 for( byte[] b : ls){
			 al.add(new String(b));
		 }
		 return al;
	}
	
	private List<byte[]> get(String key, int offset, int count) {
		int end = offset + count;
		if (offset < START) {
			offset = START;
		}
		if ((offset + count) > END) {
			end = END;
		}
		return jedis.lrange(key.getBytes(), offset, end-1);
	}
	
	
	public   List<byte[]> get(String key){
		return jedis.lrange(key.getBytes(),START, END);
	}
	
	public static RedisUtil getInstance() {
		return instance;
	}
	
	public long zcount(String key ,double start,double end){
		return jedis.zcount(key, start, end);
	}
	
	public static String generateMiniKey(int uid) {
		return generateKey(uid, Constants.MINIFEED);
	}
	


	public static String generateKey(int id,String prefix) {
		StringBuffer sb = new StringBuffer();
		sb.append(prefix);
		sb.append("_");
		sb.append(id);
		return sb.toString();
	}
	
	public static String generateNewKey(int uid) {
		return  generateKey(uid, Constants.NEWFEED);
	}
	public static void main(String[] args){
		RedisUtil.getInstance().zcount("key", 0, 1000);
	}
	
}


 